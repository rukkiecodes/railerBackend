/// <reference types="node" />
import { OAuth2Client, JWT, Compute, UserRefreshClient, BaseExternalAccountClient, GaxiosPromise, GoogleConfigurable, MethodOptions, StreamMethodOptions, GlobalOptions, GoogleAuth, BodyResponseCallback, APIRequestContext } from 'googleapis-common';
import { Readable } from 'stream';
export declare namespace container_v1 {
    export interface Options extends GlobalOptions {
        version: 'v1';
    }
    interface StandardParameters {
        /**
         * Auth client or API Key for the request
         */
        auth?: string | OAuth2Client | JWT | Compute | UserRefreshClient | BaseExternalAccountClient | GoogleAuth;
        /**
         * V1 error format.
         */
        '$.xgafv'?: string;
        /**
         * OAuth access token.
         */
        access_token?: string;
        /**
         * Data format for response.
         */
        alt?: string;
        /**
         * JSONP
         */
        callback?: string;
        /**
         * Selector specifying which fields to include in a partial response.
         */
        fields?: string;
        /**
         * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
         */
        key?: string;
        /**
         * OAuth 2.0 token for the current user.
         */
        oauth_token?: string;
        /**
         * Returns response with indentations and line breaks.
         */
        prettyPrint?: boolean;
        /**
         * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
         */
        quotaUser?: string;
        /**
         * Legacy upload protocol for media (e.g. "media", "multipart").
         */
        uploadType?: string;
        /**
         * Upload protocol for media (e.g. "raw", "multipart").
         */
        upload_protocol?: string;
    }
    /**
     * Kubernetes Engine API
     *
     * Builds and manages container-based applications, powered by the open source Kubernetes technology.
     *
     * @example
     * ```js
     * const {google} = require('googleapis');
     * const container = google.container('v1');
     * ```
     */
    export class Container {
        context: APIRequestContext;
        projects: Resource$Projects;
        constructor(options: GlobalOptions, google?: GoogleConfigurable);
    }
    /**
     * AcceleratorConfig represents a Hardware Accelerator request.
     */
    export interface Schema$AcceleratorConfig {
        /**
         * The number of the accelerator cards exposed to an instance.
         */
        acceleratorCount?: string | null;
        /**
         * The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)
         */
        acceleratorType?: string | null;
        /**
         * Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).
         */
        gpuPartitionSize?: string | null;
    }
    /**
     * Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.
     */
    export interface Schema$AddonsConfig {
        /**
         * Configuration for the Cloud Run addon, which allows the user to use a managed Knative service.
         */
        cloudRunConfig?: Schema$CloudRunConfig;
        /**
         * Configuration for the ConfigConnector add-on, a Kubernetes extension to manage hosted GCP services through the Kubernetes API
         */
        configConnectorConfig?: Schema$ConfigConnectorConfig;
        /**
         * Configuration for NodeLocalDNS, a dns cache running on cluster nodes
         */
        dnsCacheConfig?: Schema$DnsCacheConfig;
        /**
         * Configuration for the Compute Engine Persistent Disk CSI driver.
         */
        gcePersistentDiskCsiDriverConfig?: Schema$GcePersistentDiskCsiDriverConfig;
        /**
         * Configuration for the GCP Filestore CSI driver.
         */
        gcpFilestoreCsiDriverConfig?: Schema$GcpFilestoreCsiDriverConfig;
        /**
         * Configuration for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.
         */
        horizontalPodAutoscaling?: Schema$HorizontalPodAutoscaling;
        /**
         * Configuration for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.
         */
        httpLoadBalancing?: Schema$HttpLoadBalancing;
        /**
         * Configuration for the Kubernetes Dashboard. This addon is deprecated, and will be disabled in 1.15. It is recommended to use the Cloud Console to manage and monitor your Kubernetes clusters, workloads and applications. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dashboards
         */
        kubernetesDashboard?: Schema$KubernetesDashboard;
        /**
         * Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.
         */
        networkPolicyConfig?: Schema$NetworkPolicyConfig;
    }
    /**
     * Configuration for returning group information from authenticators.
     */
    export interface Schema$AuthenticatorGroupsConfig {
        /**
         * Whether this cluster should return group membership lookups during authentication using a group of security groups.
         */
        enabled?: boolean | null;
        /**
         * The name of the security group-of-groups to be used. Only relevant if enabled = true.
         */
        securityGroup?: string | null;
    }
    /**
     * Autopilot is the configuration for Autopilot settings on the cluster.
     */
    export interface Schema$Autopilot {
        /**
         * Enable Autopilot
         */
        enabled?: boolean | null;
    }
    /**
     * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
     */
    export interface Schema$AutoprovisioningNodePoolDefaults {
        /**
         * The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption
         */
        bootDiskKmsKey?: string | null;
        /**
         * Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.
         */
        diskSizeGb?: number | null;
        /**
         * Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'
         */
        diskType?: string | null;
        /**
         * The image type to use for NAP created node.
         */
        imageType?: string | null;
        /**
         * Specifies the node management options for NAP created node-pools.
         */
        management?: Schema$NodeManagement;
        /**
         * Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) To unset the min cpu platform field pass "automatic" as field value.
         */
        minCpuPlatform?: string | null;
        /**
         * Scopes that are used by NAP when creating node pools.
         */
        oauthScopes?: string[] | null;
        /**
         * The Google Cloud Platform Service Account to be used by the node VMs.
         */
        serviceAccount?: string | null;
        /**
         * Shielded Instance options.
         */
        shieldedInstanceConfig?: Schema$ShieldedInstanceConfig;
        /**
         * Specifies the upgrade settings for NAP created node pools
         */
        upgradeSettings?: Schema$UpgradeSettings;
    }
    /**
     * AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.
     */
    export interface Schema$AutoUpgradeOptions {
        /**
         * [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
         */
        autoUpgradeStartTime?: string | null;
        /**
         * [Output only] This field is set when upgrades are about to commence with the description of the upgrade.
         */
        description?: string | null;
    }
    /**
     * Parameters for using BigQuery as the destination of resource usage export.
     */
    export interface Schema$BigQueryDestination {
        /**
         * The ID of a BigQuery Dataset.
         */
        datasetId?: string | null;
    }
    /**
     * Configuration for Binary Authorization.
     */
    export interface Schema$BinaryAuthorization {
        /**
         * Enable Binary Authorization for this cluster. If enabled, all container images will be validated by Binary Authorization.
         */
        enabled?: boolean | null;
    }
    /**
     * CancelOperationRequest cancels a single operation.
     */
    export interface Schema$CancelOperationRequest {
        /**
         * The name (project, location, operation id) of the operation to cancel. Specified in the format `projects/x/locations/x/operations/x`.
         */
        name?: string | null;
        /**
         * Deprecated. The server-assigned `name` of the operation. This field has been deprecated and replaced by the name field.
         */
        operationId?: string | null;
        /**
         * Deprecated. The Google Developers Console [project ID or project number](https://support.google.com/cloud/answer/6158840). This field has been deprecated and replaced by the name field.
         */
        projectId?: string | null;
        /**
         * Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation resides. This field has been deprecated and replaced by the name field.
         */
        zone?: string | null;
    }
    /**
     * CidrBlock contains an optional name and one CIDR block.
     */
    export interface Schema$CidrBlock {
        /**
         * cidr_block must be specified in CIDR notation.
         */
        cidrBlock?: string | null;
        /**
         * display_name is an optional field for users to identify CIDR blocks.
         */
        displayName?: string | null;
    }
    /**
     * Configuration for client certificates on the cluster.
     */
    export interface Schema$ClientCertificateConfig {
        /**
         * Issue a client certificate.
         */
        issueClientCertificate?: boolean | null;
    }
    /**
     * Configuration options for the Cloud Run feature.
     */
    export interface Schema$CloudRunConfig {
        /**
         * Whether Cloud Run addon is enabled for this cluster.
         */
        disabled?: boolean | null;
        /**
         * Which load balancer type is installed for Cloud Run.
         */
        loadBalancerType?: string | null;
    }
    /**
     * A Google Kubernetes Engine cluster.
     */
    export interface Schema$Cluster {
        /**
         * Configurations for the various addons available to run in the cluster.
         */
        addonsConfig?: Schema$AddonsConfig;
        /**
         * Configuration controlling RBAC group membership information.
         */
        authenticatorGroupsConfig?: Schema$AuthenticatorGroupsConfig;
        /**
         * Autopilot configuration for the cluster.
         */
        autopilot?: Schema$Autopilot;
        /**
         * Cluster-level autoscaling configuration.
         */
        autoscaling?: Schema$ClusterAutoscaling;
        /**
         * Configuration for Binary Authorization.
         */
        binaryAuthorization?: Schema$BinaryAuthorization;
        /**
         * The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.
         */
        clusterIpv4Cidr?: string | null;
        /**
         * Which conditions caused the current cluster state.
         */
        conditions?: Schema$StatusCondition[];
        /**
         * Configuration of Confidential Nodes
         */
        confidentialNodes?: Schema$ConfidentialNodes;
        /**
         * [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
         */
        createTime?: string | null;
        /**
         * [Output only] The current software version of the master endpoint.
         */
        currentMasterVersion?: string | null;
        /**
         * [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.
         */
        currentNodeCount?: number | null;
        /**
         * [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.
         */
        currentNodeVersion?: string | null;
        /**
         * Configuration of etcd encryption.
         */
        databaseEncryption?: Schema$DatabaseEncryption;
        /**
         * The default constraint on the maximum number of pods that can be run simultaneously on a node in the node pool of this cluster. Only honored if cluster created with IP Alias support.
         */
        defaultMaxPodsConstraint?: Schema$MaxPodsConstraint;
        /**
         * An optional description of this cluster.
         */
        description?: string | null;
        /**
         * Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.
         */
        enableKubernetesAlpha?: boolean | null;
        /**
         * Enable the ability to use Cloud TPUs in this cluster.
         */
        enableTpu?: boolean | null;
        /**
         * [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.
         */
        endpoint?: string | null;
        /**
         * [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
         */
        expireTime?: string | null;
        /**
         * Output only. Unique id for the cluster.
         */
        id?: string | null;
        /**
         * The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - "latest": picks the highest valid Kubernetes version - "1.X": picks the highest valid patch+gke.N patch in the 1.X version - "1.X.Y": picks the highest valid gke.N patch in the 1.X.Y version - "1.X.Y-gke.N": picks an explicit Kubernetes version - "","-": picks the default Kubernetes version
         */
        initialClusterVersion?: string | null;
        /**
         * The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "node_config") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.
         */
        initialNodeCount?: number | null;
        /**
         * Deprecated. Use node_pools.instance_group_urls.
         */
        instanceGroupUrls?: string[] | null;
        /**
         * Configuration for cluster IP allocation.
         */
        ipAllocationPolicy?: Schema$IPAllocationPolicy;
        /**
         * The fingerprint of the set of labels for this cluster.
         */
        labelFingerprint?: string | null;
        /**
         * Configuration for the legacy ABAC authorization mode.
         */
        legacyAbac?: Schema$LegacyAbac;
        /**
         * [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.
         */
        location?: string | null;
        /**
         * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.
         */
        locations?: string[] | null;
        /**
         * Logging configuration for the cluster.
         */
        loggingConfig?: Schema$LoggingConfig;
        /**
         * The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.
         */
        loggingService?: string | null;
        /**
         * Configure the maintenance policy for this cluster.
         */
        maintenancePolicy?: Schema$MaintenancePolicy;
        /**
         * The authentication information for accessing the master endpoint. If unspecified, the defaults are used: For clusters before v1.12, if master_auth is unspecified, `username` will be set to "admin", a random password will be generated, and a client certificate will be issued.
         */
        masterAuth?: Schema$MasterAuth;
        /**
         * The configuration options for master authorized networks feature.
         */
        masterAuthorizedNetworksConfig?: Schema$MasterAuthorizedNetworksConfig;
        /**
         * Configuration for issuance of mTLS keys and certificates to Kubernetes pods.
         */
        meshCertificates?: Schema$MeshCertificates;
        /**
         * Monitoring configuration for the cluster.
         */
        monitoringConfig?: Schema$MonitoringConfig;
        /**
         * The monitoring service the cluster should use to write metrics. Currently available options: * "monitoring.googleapis.com/kubernetes" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.
         */
        monitoringService?: string | null;
        /**
         * The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.
         */
        name?: string | null;
        /**
         * The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.
         */
        network?: string | null;
        /**
         * Configuration for cluster networking.
         */
        networkConfig?: Schema$NetworkConfig;
        /**
         * Configuration options for the NetworkPolicy feature.
         */
        networkPolicy?: Schema$NetworkPolicy;
        /**
         * Parameters used in creating the cluster's nodes. For requests, this field should only be used in lieu of a "node_pool" object, since this configuration (along with the "initial_node_count") will be used to create a "NodePool" object with an auto-generated name. Do not use this and a node_pool at the same time. For responses, this field will be populated with the node configuration of the first node pool. (For configuration of each node pool, see `node_pool.config`) If unspecified, the defaults are used. This field is deprecated, use node_pool.config instead.
         */
        nodeConfig?: Schema$NodeConfig;
        /**
         * [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.
         */
        nodeIpv4CidrSize?: number | null;
        /**
         * The node pools associated with this cluster. This field should not be set if "node_config" or "initial_node_count" are specified.
         */
        nodePools?: Schema$NodePool[];
        /**
         * Notification configuration of the cluster.
         */
        notificationConfig?: Schema$NotificationConfig;
        /**
         * Configuration for private cluster.
         */
        privateClusterConfig?: Schema$PrivateClusterConfig;
        /**
         * Release channel configuration.
         */
        releaseChannel?: Schema$ReleaseChannel;
        /**
         * The resource labels for the cluster to use to annotate any related Google Compute Engine resources.
         */
        resourceLabels?: {
            [key: string]: string;
        } | null;
        /**
         * Configuration for exporting resource usages. Resource usage export is disabled when this config is unspecified.
         */
        resourceUsageExportConfig?: Schema$ResourceUsageExportConfig;
        /**
         * [Output only] Server-defined URL for the resource.
         */
        selfLink?: string | null;
        /**
         * [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.
         */
        servicesIpv4Cidr?: string | null;
        /**
         * Shielded Nodes configuration.
         */
        shieldedNodes?: Schema$ShieldedNodes;
        /**
         * [Output only] The current status of this cluster.
         */
        status?: string | null;
        /**
         * [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.
         */
        statusMessage?: string | null;
        /**
         * The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.
         */
        subnetwork?: string | null;
        /**
         * [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).
         */
        tpuIpv4CidrBlock?: string | null;
        /**
         * Cluster-level Vertical Pod Autoscaling configuration.
         */
        verticalPodAutoscaling?: Schema$VerticalPodAutoscaling;
        /**
         * Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.
         */
        workloadIdentityConfig?: Schema$WorkloadIdentityConfig;
        /**
         * [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead.
         */
        zone?: string | null;
    }
    /**
     * ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.
     */
    export interface Schema$ClusterAutoscaling {
        /**
         * The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.
         */
        autoprovisioningLocations?: string[] | null;
        /**
         * AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.
         */
        autoprovisioningNodePoolDefaults?: Schema$AutoprovisioningNodePoolDefaults;
        /**
         * Defines autoscaling behaviour.
         */
        autoscalingProfile?: string | null;
        /**
         * Enables automatic node pool creation and deletion.
         */
        enableNodeAutoprovisioning?: boolean | null;
        /**
         * Contains global constraints regarding minimum and maximum amount of resources in the cluster.
         */
        resourceLimits?: Schema$ResourceLimit[];
    }
    /**
     * ClusterUpdate describes an update to the cluster. Exactly one update can be applied to a cluster with each request, so at most one field can be provided.
     */
    export interface Schema$ClusterUpdate {
        /**
         * Configurations for the various addons available to run in the cluster.
         */
        desiredAddonsConfig?: Schema$AddonsConfig;
        /**
         * The desired authenticator groups config for the cluster.
         */
        desiredAuthenticatorGroupsConfig?: Schema$AuthenticatorGroupsConfig;
        /**
         * The desired Autopilot configuration for the cluster.
         */
        desiredAutopilot?: Schema$Autopilot;
        /**
         * The desired configuration options for the Binary Authorization feature.
         */
        desiredBinaryAuthorization?: Schema$BinaryAuthorization;
        /**
         * 