<script src="/script/vue.js"></script>
<script src="/script/vuetify.js"></script>
<script src="/script/vuesax.min.js"></script>
<script src="/script/ace/src-min/ace.js"></script>
<script src="/script/ace/src-min/mode-html.js"></script>
<script src="/script/emmet.js"></script>
<script src="/script/ace/src-min/ext-emmet.js"></script>
<script src="/script/ace/src-min/ext-language_tools.js"></script>
<script src="/script/ace/src-min/ext-elastic_tabstops_lite.js"></script>
<script src="/reload/reload.js"></script>

<script>
  new Vue({
    el: '#main',
    data: {
      drawer: true,
      routes: [{
          title: 'Template',
          icon: 'mdi-view-dashboard-outline',
          to: '/',
          location: window.location.pathname
        },
        {
          title: 'Copy',
          icon: 'mdi-content-copy',
          to: '/copy',
          location: window.location.pathname
        },
        {
          title: 'Email editor',
          icon: 'mdi-view-dashboard-variant-outline',
          to: '/emailEditor',
          location: window.location.pathname
        },
        {
          title: 'Compose template',
          icon: 'mdi-code-json',
          to: '/codeEditor',
          location: window.location.pathname
        },
      ],
      fav: true,
      menu: false,
      message: false,
      hints: true,
      search: "",
      logginDialog: false,
      signupDialog: false,
      email: "",
      password: "",
      remember: true,
      codeEditorWidth: null,
      codeEditorHeight: null,
      html: ``,
      appMode: true
    },
    mounted() {
      const drawerBorder = document.querySelector(".v-navigation-drawer__border")
      if (drawerBorder) {
        drawerBorder.style.display = 'none'
      }
      const vsSwitch = document.querySelector(".vs-switch")
      if (vsSwitch) {
        vsSwitch.style.background = "#121212"
      }

      const editorContainer = document.querySelector("#codeEditor")

      if (editorContainer) {
        // Setup ace
        let codeEditor = ace.edit("codeEditor")

        // Configure ace
        let editorLib = {
          init() {
            // set theme
            codeEditor.setTheme("ace/theme/dracula")

            // set language mode
            codeEditor.session.setMode("ace/mode/html")

            // set options
            codeEditor.setOptions({
              fontFamily: "Victor mono",
              fontSize: '12pt',
              highlightActiveLine: true,
              highlightSelectedWord: true,
              cursorStyle: "smooth",
              behavioursEnabled: true,
              wrapBehavioursEnabled: true,
              autoScrollEditorIntoView: true,
              copyWithEmptySelection: true,
              useSoftTabs: true,
              navigateWithinSoftTabs: true,
              enableMultiselect: true,
              enableEmmet: true,
              wrap: true,
              showPrintMargin: false,
              showFoldWidgets: true,
              fadeFoldWidgets: true,
              showGutter: true,
              scrollPastEnd: true,
              newLineMode: "auto",
              useWorker: true,
              useSoftTabs: true,
              tabSize: 3,
              enableBasicAutocompletion: true,
              enableLiveAutocompletion: true,
              enableSnippets: true,
              useElasticTabstops: true,
              highlightGutterLine: true
            })
          }
        }

        // Get value of code editor
        setInterval(() => {
          this.html = codeEditor.getValue()
        }, 200)
        editorLib.init()
      }

    },
    methods: {
      gotoLoggin() {
        this.signupDialog = false
        this.logginDialog = true
      },
      gotoSignup() {
        this.logginDialog = false
        this.signupDialog = true
      }
    },
    computed: {
      drawerMiniVariant() {
        switch (this.$vuetify.breakpoint.name) {
          case 'xs':
            return false
          case 'sm':
            return false
          case 'md':
            return false
          case 'lg':
            return true
          case 'xl':
            return true
        }
      },

      designGrid() {
        switch (this.$vuetify.breakpoint.name) {
          case 'xs':
            return "cardsMobile"
          case 'sm':
            return "cardsTab"
          case 'md':
            return "cardsIpadPro"
          case 'lg':
            return "cardsLargeScreens"
          case 'xl':
            return "cardsExtraLargeScreens"
        }
      },
    },
    vuetify: new Vuetify({
      theme: {
        dark: true
      },
    }),
  })
</script>
</body>

</html>